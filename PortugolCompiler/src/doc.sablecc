Package expression;

Helpers

    unicode             = [0x0 .. 0xfffff];

    unicode_letras      = [0x0041..0x005a] | [0x0061..0x007a];
    unicode_numeros     = [0x0030..0x0039];

    ht                  = 0x0009;
    lf                  = 0x000a;
    ff                  = 0x000c;
    cr                  = 0x000d;
    espaco              = ' ';

    fim_de_linha        = lf | cr | cr lf;
    branco              = (espaco | ht | ff | fim_de_linha);

    estrela             = '*';
    barra               = '/';
    aspas               = ''';
    sublinhado          = '_';
    virgula_real        = ',';

    nao_estrela         = [unicode - estrela];
    nao_barra           = [unicode - barra];
    nao_estrela_ou_barra= [unicode - [estrela + barra]];
    nao_aspas           = [unicode - aspas];
    nao_fim_de_linha    = [unicode - [lf + cr]];

    letras              = unicode_letras | sublinhado;
    letras_ou_numeros   = unicode_letras | unicode_numeros | sublinhado;
    
    comentario_linha    = '//' nao_fim_de_linha* fim_de_linha?; 
    comentario_inicio   = '/*';
    comentario_corpo    = nao_estrela_ou_barra* | (estrela nao_barra)* | (nao_estrela barra)*;
    comentario_final    = '*/';

    sinal               = ('+'|'-')?;

    digitos             = unicode_numeros+  ;
    inteiro             = sinal digitos;
    real                = inteiro | inteiro virgula_real digitos;  //inteiro ponto digitos;
    caractere           = [nao_aspas - [lf + cr]];


States
  normal,
  comentario;

Tokens

    {normal} branco              = branco;
    {normal} 
    comentario_linha             = comentario_linha;

    {normal->comentario, comentario} 
    comentario                   = comentario_inicio;
    {comentario} comentario_final= comentario_final;
    {comentario} comentario_corpo= comentario_corpo;
    

    {normal} recebe              = '<-';
    {normal} pontovirgula        = ';';
    {normal} virgula             = ',';
    {normal} ponto               = '.';
    {normal} doispontos          = ':';
    {normal} a_cochete           = '[';
    {normal} f_cochete           = ']';
    {normal} a_parenteses        = '(';
    {normal} f_parenteses        = ')';
    {normal} a_chave             = '{';
    {normal} f_chave             = '}';

    {normal} menos               = '-';
    {normal} mais                = '+';
    {normal} vezes               = '*';
    {normal} dividido            = '/';
    {normal} resto               = 'resto';

    {normal} e                   = 'e';
    {normal} ou                  = 'ou';
    {normal} xor                 = 'xor';
    {normal} nao                 = 'nao';

    {normal} igual               = '=';
    {normal} diferente           = '<>';
    {normal} menorigual          = '<=';
    {normal} maiorigual          = '>=';
    {normal} maior               = '>';
    {normal} menor               = '<';

    {normal} constante           = 'const';
    
    {normal} retorne             = 'retorne'; 

    {normal} programa            = 'programa';
    {normal} inicio              = 'inicio';
    {normal} fim_ponto			 = 'fim.';
    {normal} proximo             = 'proximo';
    
    {normal} leia                = 'leia';
    {normal} escreva             = 'escreva';
    {normal} escrevaln           = 'escrevaln';
    
    {normal} se                  = 'se';
    {normal} entao               = 'entao';
    {normal} senao               = 'senao';
    {normal} fim_se              = 'fim se';

    {normal} avalie              = 'avalie';
    {normal} caso                = 'caso';
    {normal} fim_avalie          = 'fim avalie';
    
    {normal} enquanto            = 'enquanto';
    {normal} faca                = 'faca';
    {normal} fim_enquanto        = 'fim enquanto';

    {normal} repita              = 'repita';
    {normal} ate                 = 'ate';
    
    {normal} para                = 'para';
    {normal} de                  = 'de';
    {normal} passo               = 'passo';
    {normal} fim_para            = 'fim para';
    
    {normal} inteiro             = inteiro;
    {normal} caractere           = aspas caractere* aspas;
    {normal} real                = real;

    {normal} n_real              = 'real';
    {normal} n_inteiro           = 'inteiro';
    {normal} n_caractere         = 'caractere';

    {normal} id                  = letras | letras letras_ou_numeros*;

Ignored Tokens
   comentario, comentario_linha, branco;

Productions
    start               = {start}               instancia_programa;

    identficador        = {id}                  id;
    
    bloco_comando       = {comando_simples}     comando
                        | {bloco_comandos}      bloco_comando comando;
                        
    bloco_expressao     = {expressao_logica_simples}  expressao_logica
                        | {bloco_espressoes_logica}    bloco_expressao virgula expressao_logica;
                        
    bloco_variavel      = {variavel_simples}    variavel
                        | {bloco_variaveis}     bloco_variavel virgula variavel;
                        
    bloco_caso          = {caso_simples}        caso valor doispontos bloco_comando
                        | {bloco_casos}         bloco_caso caso valor doispontos bloco_comando;
                        
    bloco_declaracao    = {declaracao_simples}  declaracao
                        | {bloco_declaracao}    bloco_declaracao declaracao;

    instancia_programa  = {programa}            programa identficador inicio bloco_declaracao bloco_comando fim_ponto;
    
    declaracao          = {declaracao_variavel} tipo doispontos bloco_variavel pontovirgula
                        | {declaracao_const}    constante id valor pontovirgula;

    tipo                = {real}                n_real 
                        | {inteiro}             n_inteiro 
                        | {caractere}           n_caractere;

    variavel            = {variavel}            identficador 
                        | {variavel_vetor}      identficador a_cochete inteiro f_cochete;

    valor               = {valor_real}          real 
                        | {valor_inteiro}       inteiro 
                        | {valor_caractere}     caractere;

    comando             = {atribuicao}          atribuicoes
                        | {funcoes}             funcoes
                        | {se}                  se_estruturas
                        | {se_nao}              se_estruturas_nao 
                        | {se_entao}            se_senao_estruturas
                        | {se_nao_entao}        se_senao_estruturas_nao
                        | {avalie}              avalie_estruturas
                        | {enquanto}            enquanto_estruturas
                        | {repita}              repita_estruturas
                        | {para}                para_estruturas
                        | {para_passo}          para_passo_estruturas;
            
    atribuicoes         = {atribuicao}          variavel recebe expressao pontovirgula;

    funcoes             = {leia}                leia a_parenteses bloco_variavel f_parenteses pontovirgula
                        | {escreva}             escreva a_parenteses bloco_expressao f_parenteses pontovirgula;
   
    senao_estruturas    = {senao}               senao bloco_comando;
    
    passo_estruturas    = {passo}               passo inteiro;   
    
    ate_estrutura       = {ate}                 ate inteiro;

    se_estruturas       = {se}                  se a_parenteses expressao_logica f_parenteses entao bloco_comando fim_se pontovirgula;
    se_estruturas_nao   = {se_nao}              se sinal_logico_nao a_parenteses expressao_logica f_parenteses entao bloco_comando fim_se pontovirgula;   
    se_senao_estruturas = {se_senao}            se a_parenteses expressao_logica f_parenteses entao bloco_comando senao_estruturas fim_se pontovirgula;
    se_senao_estruturas_nao = {se_nao_senao}    se sinal_logico_nao a_parenteses expressao_logica f_parenteses entao bloco_comando senao_estruturas fim_se pontovirgula;
    avalie_estruturas   = {avalie}              avalie a_parenteses expressao f_parenteses bloco_caso senao doispontos bloco_comando fim_avalie pontovirgula;
    enquanto_estruturas = {enquanto}            enquanto a_parenteses expressao_logica f_parenteses faca bloco_comando fim_enquanto pontovirgula;
    repita_estruturas   = {repita}              repita bloco_comando ate a_parenteses expressao_logica f_parenteses pontovirgula;
    para_estruturas     = {para}                para variavel de inteiro ate_estrutura faca bloco_comando fim_para pontovirgula;
    para_passo_estruturas={para_passo}          para variavel de inteiro passo_estruturas ate_estrutura faca bloco_comando fim_para pontovirgula;
             
//Lista de prioridades: http://pt.wikipedia.org/wiki/Operadores_em_C_e_C%2B%2B
//Parenteses

//Sinais Logicos - Negação
    sinal_logico_nao = {nao} nao;
    
//Sinais Aritmeticos - Multiplicação
    multiplicacao =       {vezes} vezes
                        | {dividido} dividido
                        | {resto} resto;

//Sinais Aritmeticos - Soma
    soma = {mais} mais
                        | {menos} menos;
                        
//Sinais Relacionais - Menor que
    sinal_relacional = {maior_igual} maiorigual
                        | {menor_igual} menorigual
                        | {maior} maior
                        | {menor} menor;

//Sinais Relacionais - Igualdade
    sinal_igualdade = {igualdade} igual
                        | {diferenca} diferente;

//Sinais Logicos - E
    sinal_logico_e   = {e} e;

//Sinais Logicos - Ou
    sinal_logico_ou  = {ou} ou
                        | {xor} xor;
   
//Expressao Aritmetica Pura
    expressao    =  {somas} expressao soma termo
                    | {termo} termo;
    termo        =  {multiplicacoes} termo multiplicacao fator
                    | {fator} fator;                                  
    fator        =  {parenteses}  a_parenteses expressao f_parenteses
                    | {valor} valor
                    | {var} variavel;
                  //  | {espressao_log} expressao_logica;

//Expressao Logico-Relacional
	expressao_logica =	{expressao_logica}  sinal_logico_ou termo_logico
						| {termo_logico} termo_logico;
	termo_logico	 =	{termo_logico}  sinal_logico_e expressao_relac
						| {expressao_relacional} expressao_relac;
	expressao_relac  =	{expressao_relacional}  sinal_igualdade termo_relac
						| {termo_relac} termo_relac;
	termo_relac		 =	{termo_relacional}  sinal_relacional negacao
						| {negacao}  negacao;
    negacao			 =  {negacao} sinal_logico_nao parenteses
    					| parenteses;
    parenteses		 =	{parenteses} a_parenteses expressao_logica f_parenteses;
    
    
 // Arvore Abstrata
 
 
