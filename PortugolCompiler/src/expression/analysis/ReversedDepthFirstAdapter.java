/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.analysis;

import java.util.*;
import expression.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getInstanciaPrograma() != null)
        {
            node.getInstanciaPrograma().apply(this);
        }
        outAStartStart(node);
    }

    public void inAIdIdentficador(AIdIdentficador node)
    {
        defaultIn(node);
    }

    public void outAIdIdentficador(AIdIdentficador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdentficador(AIdIdentficador node)
    {
        inAIdIdentficador(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdentficador(node);
    }

    public void inAComandoSimplesBlocoComando(AComandoSimplesBlocoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSimplesBlocoComando(AComandoSimplesBlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSimplesBlocoComando(AComandoSimplesBlocoComando node)
    {
        inAComandoSimplesBlocoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoSimplesBlocoComando(node);
    }

    public void inABlocoComandosBlocoComando(ABlocoComandosBlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComandosBlocoComando(ABlocoComandosBlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandosBlocoComando(ABlocoComandosBlocoComando node)
    {
        inABlocoComandosBlocoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        outABlocoComandosBlocoComando(node);
    }

    public void inAExpressaoSimplesBlocoExpressao(AExpressaoSimplesBlocoExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpressaoSimplesBlocoExpressao(AExpressaoSimplesBlocoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoSimplesBlocoExpressao(AExpressaoSimplesBlocoExpressao node)
    {
        inAExpressaoSimplesBlocoExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpressaoSimplesBlocoExpressao(node);
    }

    public void inABlocoEspressoesBlocoExpressao(ABlocoEspressoesBlocoExpressao node)
    {
        defaultIn(node);
    }

    public void outABlocoEspressoesBlocoExpressao(ABlocoEspressoesBlocoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoEspressoesBlocoExpressao(ABlocoEspressoesBlocoExpressao node)
    {
        inABlocoEspressoesBlocoExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getBlocoExpressao() != null)
        {
            node.getBlocoExpressao().apply(this);
        }
        outABlocoEspressoesBlocoExpressao(node);
    }

    public void inAVariavelSimplesBlocoVariavel(AVariavelSimplesBlocoVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelSimplesBlocoVariavel(AVariavelSimplesBlocoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelSimplesBlocoVariavel(AVariavelSimplesBlocoVariavel node)
    {
        inAVariavelSimplesBlocoVariavel(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelSimplesBlocoVariavel(node);
    }

    public void inABlocoVariaveisBlocoVariavel(ABlocoVariaveisBlocoVariavel node)
    {
        defaultIn(node);
    }

    public void outABlocoVariaveisBlocoVariavel(ABlocoVariaveisBlocoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoVariaveisBlocoVariavel(ABlocoVariaveisBlocoVariavel node)
    {
        inABlocoVariaveisBlocoVariavel(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getBlocoVariavel() != null)
        {
            node.getBlocoVariavel().apply(this);
        }
        outABlocoVariaveisBlocoVariavel(node);
    }

    public void inACasoSimplesBlocoCaso(ACasoSimplesBlocoCaso node)
    {
        defaultIn(node);
    }

    public void outACasoSimplesBlocoCaso(ACasoSimplesBlocoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoSimplesBlocoCaso(ACasoSimplesBlocoCaso node)
    {
        inACasoSimplesBlocoCaso(node);
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoSimplesBlocoCaso(node);
    }

    public void inABlocoCasosBlocoCaso(ABlocoCasosBlocoCaso node)
    {
        defaultIn(node);
    }

    public void outABlocoCasosBlocoCaso(ABlocoCasosBlocoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoCasosBlocoCaso(ABlocoCasosBlocoCaso node)
    {
        inABlocoCasosBlocoCaso(node);
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getBlocoCaso() != null)
        {
            node.getBlocoCaso().apply(this);
        }
        outABlocoCasosBlocoCaso(node);
    }

    public void inADeclaracaoSimplesBlocoDeclaracao(ADeclaracaoSimplesBlocoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoSimplesBlocoDeclaracao(ADeclaracaoSimplesBlocoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoSimplesBlocoDeclaracao(ADeclaracaoSimplesBlocoDeclaracao node)
    {
        inADeclaracaoSimplesBlocoDeclaracao(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoSimplesBlocoDeclaracao(node);
    }

    public void inABlocoDeclaracaoBlocoDeclaracao(ABlocoDeclaracaoBlocoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outABlocoDeclaracaoBlocoDeclaracao(ABlocoDeclaracaoBlocoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoDeclaracaoBlocoDeclaracao(ABlocoDeclaracaoBlocoDeclaracao node)
    {
        inABlocoDeclaracaoBlocoDeclaracao(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getBlocoDeclaracao() != null)
        {
            node.getBlocoDeclaracao().apply(this);
        }
        outABlocoDeclaracaoBlocoDeclaracao(node);
    }

    public void inAProgramaInstanciaPrograma(AProgramaInstanciaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaInstanciaPrograma(AProgramaInstanciaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaInstanciaPrograma(AProgramaInstanciaPrograma node)
    {
        inAProgramaInstanciaPrograma(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getBlocoDeclaracao() != null)
        {
            node.getBlocoDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getIdentficador() != null)
        {
            node.getIdentficador().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramaInstanciaPrograma(node);
    }

    public void inADeclaracaoVariavelDeclaracao(ADeclaracaoVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavelDeclaracao(ADeclaracaoVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavelDeclaracao(ADeclaracaoVariavelDeclaracao node)
    {
        inADeclaracaoVariavelDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getBlocoVariavel() != null)
        {
            node.getBlocoVariavel().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclaracaoVariavelDeclaracao(node);
    }

    public void inADeclaracaoConstDeclaracao(ADeclaracaoConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoConstDeclaracao(ADeclaracaoConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoConstDeclaracao(ADeclaracaoConstDeclaracao node)
    {
        inADeclaracaoConstDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADeclaracaoConstDeclaracao(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getNCaractere() != null)
        {
            node.getNCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAVariavelVariavel(AVariavelVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelVariavel(AVariavelVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVariavel(AVariavelVariavel node)
    {
        inAVariavelVariavel(node);
        if(node.getIdentficador() != null)
        {
            node.getIdentficador().apply(this);
        }
        outAVariavelVariavel(node);
    }

    public void inAVariavelVetorVariavel(AVariavelVetorVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelVetorVariavel(AVariavelVetorVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVetorVariavel(AVariavelVetorVariavel node)
    {
        inAVariavelVetorVariavel(node);
        if(node.getFCochete() != null)
        {
            node.getFCochete().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getACochete() != null)
        {
            node.getACochete().apply(this);
        }
        if(node.getIdentficador() != null)
        {
            node.getIdentficador().apply(this);
        }
        outAVariavelVetorVariavel(node);
    }

    public void inAValorRealValor(AValorRealValor node)
    {
        defaultIn(node);
    }

    public void outAValorRealValor(AValorRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorRealValor(AValorRealValor node)
    {
        inAValorRealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAValorRealValor(node);
    }

    public void inAValorInteiroValor(AValorInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAValorInteiroValor(AValorInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorInteiroValor(AValorInteiroValor node)
    {
        inAValorInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAValorInteiroValor(node);
    }

    public void inAValorCaractereValor(AValorCaractereValor node)
    {
        defaultIn(node);
    }

    public void outAValorCaractereValor(AValorCaractereValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorCaractereValor(AValorCaractereValor node)
    {
        inAValorCaractereValor(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outAValorCaractereValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getAtribuicoes() != null)
        {
            node.getAtribuicoes().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAFuncoesComando(AFuncoesComando node)
    {
        defaultIn(node);
    }

    public void outAFuncoesComando(AFuncoesComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncoesComando(AFuncoesComando node)
    {
        inAFuncoesComando(node);
        if(node.getFuncoes() != null)
        {
            node.getFuncoes().apply(this);
        }
        outAFuncoesComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSeEstruturas() != null)
        {
            node.getSeEstruturas().apply(this);
        }
        outASeComando(node);
    }

    public void inASeNaoComando(ASeNaoComando node)
    {
        defaultIn(node);
    }

    public void outASeNaoComando(ASeNaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoComando(ASeNaoComando node)
    {
        inASeNaoComando(node);
        if(node.getSeEstruturasNao() != null)
        {
            node.getSeEstruturasNao().apply(this);
        }
        outASeNaoComando(node);
    }

    public void inASeEntaoComando(ASeEntaoComando node)
    {
        defaultIn(node);
    }

    public void outASeEntaoComando(ASeEntaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeEntaoComando(ASeEntaoComando node)
    {
        inASeEntaoComando(node);
        if(node.getSeSenaoEstruturas() != null)
        {
            node.getSeSenaoEstruturas().apply(this);
        }
        outASeEntaoComando(node);
    }

    public void inASeNaoEntaoComando(ASeNaoEntaoComando node)
    {
        defaultIn(node);
    }

    public void outASeNaoEntaoComando(ASeNaoEntaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoEntaoComando(ASeNaoEntaoComando node)
    {
        inASeNaoEntaoComando(node);
        if(node.getSeSenaoEstruturasNao() != null)
        {
            node.getSeSenaoEstruturasNao().apply(this);
        }
        outASeNaoEntaoComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getAvalieEstruturas() != null)
        {
            node.getAvalieEstruturas().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquantoEstruturas() != null)
        {
            node.getEnquantoEstruturas().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getRepitaEstruturas() != null)
        {
            node.getRepitaEstruturas().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getParaEstruturas() != null)
        {
            node.getParaEstruturas().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getParaPassoEstruturas() != null)
        {
            node.getParaPassoEstruturas().apply(this);
        }
        outAParaPassoComando(node);
    }

    public void inAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        inAAtribuicaoAtribuicoes(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getRecebe() != null)
        {
            node.getRecebe().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAAtribuicaoAtribuicoes(node);
    }

    public void inALeiaFuncoes(ALeiaFuncoes node)
    {
        defaultIn(node);
    }

    public void outALeiaFuncoes(ALeiaFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaFuncoes(ALeiaFuncoes node)
    {
        inALeiaFuncoes(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getBlocoVariavel() != null)
        {
            node.getBlocoVariavel().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaFuncoes(node);
    }

    public void inAEscrevaFuncoes(AEscrevaFuncoes node)
    {
        defaultIn(node);
    }

    public void outAEscrevaFuncoes(AEscrevaFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaFuncoes(AEscrevaFuncoes node)
    {
        inAEscrevaFuncoes(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getBlocoExpressao() != null)
        {
            node.getBlocoExpressao().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaFuncoes(node);
    }

    public void inASenaoSenaoEstruturas(ASenaoSenaoEstruturas node)
    {
        defaultIn(node);
    }

    public void outASenaoSenaoEstruturas(ASenaoSenaoEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSenaoEstruturas(ASenaoSenaoEstruturas node)
    {
        inASenaoSenaoEstruturas(node);
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoSenaoEstruturas(node);
    }

    public void inAPassoPassoEstruturas(APassoPassoEstruturas node)
    {
        defaultIn(node);
    }

    public void outAPassoPassoEstruturas(APassoPassoEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassoPassoEstruturas(APassoPassoEstruturas node)
    {
        inAPassoPassoEstruturas(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        outAPassoPassoEstruturas(node);
    }

    public void inAAteAteEstrutura(AAteAteEstrutura node)
    {
        defaultIn(node);
    }

    public void outAAteAteEstrutura(AAteAteEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAteAteEstrutura(AAteAteEstrutura node)
    {
        inAAteAteEstrutura(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAAteAteEstrutura(node);
    }

    public void inASeSeEstruturas(ASeSeEstruturas node)
    {
        defaultIn(node);
    }

    public void outASeSeEstruturas(ASeSeEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSeEstruturas(ASeSeEstruturas node)
    {
        inASeSeEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSeEstruturas(node);
    }

    public void inASeNaoSeEstruturasNao(ASeNaoSeEstruturasNao node)
    {
        defaultIn(node);
    }

    public void outASeNaoSeEstruturasNao(ASeNaoSeEstruturasNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoSeEstruturasNao(ASeNaoSeEstruturasNao node)
    {
        inASeNaoSeEstruturasNao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getSinalLogicoNao() != null)
        {
            node.getSinalLogicoNao().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeNaoSeEstruturasNao(node);
    }

    public void inASeSenaoSeSenaoEstruturas(ASeSenaoSeSenaoEstruturas node)
    {
        defaultIn(node);
    }

    public void outASeSenaoSeSenaoEstruturas(ASeSenaoSeSenaoEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoSeSenaoEstruturas(ASeSenaoSeSenaoEstruturas node)
    {
        inASeSenaoSeSenaoEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getSenaoEstruturas() != null)
        {
            node.getSenaoEstruturas().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoSeSenaoEstruturas(node);
    }

    public void inASeNaoSenaoSeSenaoEstruturasNao(ASeNaoSenaoSeSenaoEstruturasNao node)
    {
        defaultIn(node);
    }

    public void outASeNaoSenaoSeSenaoEstruturasNao(ASeNaoSenaoSeSenaoEstruturasNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoSenaoSeSenaoEstruturasNao(ASeNaoSenaoSeSenaoEstruturasNao node)
    {
        inASeNaoSenaoSeSenaoEstruturasNao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getSenaoEstruturas() != null)
        {
            node.getSenaoEstruturas().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getSinalLogicoNao() != null)
        {
            node.getSinalLogicoNao().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeNaoSenaoSeSenaoEstruturasNao(node);
    }

    public void inAAvalieAvalieEstruturas(AAvalieAvalieEstruturas node)
    {
        defaultIn(node);
    }

    public void outAAvalieAvalieEstruturas(AAvalieAvalieEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieAvalieEstruturas(AAvalieAvalieEstruturas node)
    {
        inAAvalieAvalieEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getSenaoEstruturas() != null)
        {
            node.getSenaoEstruturas().apply(this);
        }
        if(node.getBlocoCaso() != null)
        {
            node.getBlocoCaso().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieAvalieEstruturas(node);
    }

    public void inAEnquantoEnquantoEstruturas(AEnquantoEnquantoEstruturas node)
    {
        defaultIn(node);
    }

    public void outAEnquantoEnquantoEstruturas(AEnquantoEnquantoEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoEnquantoEstruturas(AEnquantoEnquantoEstruturas node)
    {
        inAEnquantoEnquantoEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoEnquantoEstruturas(node);
    }

    public void inARepitaRepitaEstruturas(ARepitaRepitaEstruturas node)
    {
        defaultIn(node);
    }

    public void outARepitaRepitaEstruturas(ARepitaRepitaEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaRepitaEstruturas(ARepitaRepitaEstruturas node)
    {
        inARepitaRepitaEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaRepitaEstruturas(node);
    }

    public void inAParaParaEstruturas(AParaParaEstruturas node)
    {
        defaultIn(node);
    }

    public void outAParaParaEstruturas(AParaParaEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaParaEstruturas(AParaParaEstruturas node)
    {
        inAParaParaEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getAteEstrutura() != null)
        {
            node.getAteEstrutura().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaParaEstruturas(node);
    }

    public void inAParaPassoParaPassoEstruturas(AParaPassoParaPassoEstruturas node)
    {
        defaultIn(node);
    }

    public void outAParaPassoParaPassoEstruturas(AParaPassoParaPassoEstruturas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoParaPassoEstruturas(AParaPassoParaPassoEstruturas node)
    {
        inAParaPassoParaPassoEstruturas(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getBlocoComando() != null)
        {
            node.getBlocoComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getPassoEstruturas() != null)
        {
            node.getPassoEstruturas().apply(this);
        }
        if(node.getAteEstrutura() != null)
        {
            node.getAteEstrutura().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaPassoParaPassoEstruturas(node);
    }

    public void inAVezesMultiplicacao(AVezesMultiplicacao node)
    {
        defaultIn(node);
    }

    public void outAVezesMultiplicacao(AVezesMultiplicacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesMultiplicacao(AVezesMultiplicacao node)
    {
        inAVezesMultiplicacao(node);
        if(node.getVezes() != null)
        {
            node.getVezes().apply(this);
        }
        outAVezesMultiplicacao(node);
    }

    public void inADivididoMultiplicacao(ADivididoMultiplicacao node)
    {
        defaultIn(node);
    }

    public void outADivididoMultiplicacao(ADivididoMultiplicacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivididoMultiplicacao(ADivididoMultiplicacao node)
    {
        inADivididoMultiplicacao(node);
        if(node.getDividido() != null)
        {
            node.getDividido().apply(this);
        }
        outADivididoMultiplicacao(node);
    }

    public void inARestoMultiplicacao(ARestoMultiplicacao node)
    {
        defaultIn(node);
    }

    public void outARestoMultiplicacao(ARestoMultiplicacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestoMultiplicacao(ARestoMultiplicacao node)
    {
        inARestoMultiplicacao(node);
        if(node.getResto() != null)
        {
            node.getResto().apply(this);
        }
        outARestoMultiplicacao(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inAMaiorIgualSinalRelacional(AMaiorIgualSinalRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualSinalRelacional(AMaiorIgualSinalRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualSinalRelacional(AMaiorIgualSinalRelacional node)
    {
        inAMaiorIgualSinalRelacional(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaiorIgualSinalRelacional(node);
    }

    public void inAMenorIgualSinalRelacional(AMenorIgualSinalRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualSinalRelacional(AMenorIgualSinalRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualSinalRelacional(AMenorIgualSinalRelacional node)
    {
        inAMenorIgualSinalRelacional(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMenorIgualSinalRelacional(node);
    }

    public void inAMaiorSinalRelacional(AMaiorSinalRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorSinalRelacional(AMaiorSinalRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorSinalRelacional(AMaiorSinalRelacional node)
    {
        inAMaiorSinalRelacional(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorSinalRelacional(node);
    }

    public void inAMenorSinalRelacional(AMenorSinalRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorSinalRelacional(AMenorSinalRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorSinalRelacional(AMenorSinalRelacional node)
    {
        inAMenorSinalRelacional(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorSinalRelacional(node);
    }

    public void inAIgualdadeSinalIgualgade(AIgualdadeSinalIgualgade node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeSinalIgualgade(AIgualdadeSinalIgualgade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeSinalIgualgade(AIgualdadeSinalIgualgade node)
    {
        inAIgualdadeSinalIgualgade(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualdadeSinalIgualgade(node);
    }

    public void inADiferencaSinalIgualgade(ADiferencaSinalIgualgade node)
    {
        defaultIn(node);
    }

    public void outADiferencaSinalIgualgade(ADiferencaSinalIgualgade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferencaSinalIgualgade(ADiferencaSinalIgualgade node)
    {
        inADiferencaSinalIgualgade(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferencaSinalIgualgade(node);
    }

    public void inAOuSinalLogicoOu(AOuSinalLogicoOu node)
    {
        defaultIn(node);
    }

    public void outAOuSinalLogicoOu(AOuSinalLogicoOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuSinalLogicoOu(AOuSinalLogicoOu node)
    {
        inAOuSinalLogicoOu(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuSinalLogicoOu(node);
    }

    public void inAXorSinalLogicoOu(AXorSinalLogicoOu node)
    {
        defaultIn(node);
    }

    public void outAXorSinalLogicoOu(AXorSinalLogicoOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorSinalLogicoOu(AXorSinalLogicoOu node)
    {
        inAXorSinalLogicoOu(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorSinalLogicoOu(node);
    }

    public void inAESinalLogicoE(AESinalLogicoE node)
    {
        defaultIn(node);
    }

    public void outAESinalLogicoE(AESinalLogicoE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAESinalLogicoE(AESinalLogicoE node)
    {
        inAESinalLogicoE(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAESinalLogicoE(node);
    }

    public void inANaoSinalLogicoNao(ANaoSinalLogicoNao node)
    {
        defaultIn(node);
    }

    public void outANaoSinalLogicoNao(ANaoSinalLogicoNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoSinalLogicoNao(ANaoSinalLogicoNao node)
    {
        inANaoSinalLogicoNao(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoSinalLogicoNao(node);
    }

    public void inASomasExpressao(ASomasExpressao node)
    {
        defaultIn(node);
    }

    public void outASomasExpressao(ASomasExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomasExpressao(ASomasExpressao node)
    {
        inASomasExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outASomasExpressao(node);
    }

    public void inATermoExpressao(ATermoExpressao node)
    {
        defaultIn(node);
    }

    public void outATermoExpressao(ATermoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpressao(ATermoExpressao node)
    {
        inATermoExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpressao(node);
    }

    public void inAMultiplicacoesTermo(AMultiplicacoesTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacoesTermo(AMultiplicacoesTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacoesTermo(AMultiplicacoesTermo node)
    {
        inAMultiplicacoesTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultiplicacoesTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAParentesesFator(AParentesesFator node)
    {
        defaultIn(node);
    }

    public void outAParentesesFator(AParentesesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesFator(AParentesesFator node)
    {
        inAParentesesFator(node);
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        outAParentesesFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAVarFator(AVarFator node)
    {
        defaultIn(node);
    }

    public void outAVarFator(AVarFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFator(AVarFator node)
    {
        inAVarFator(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarFator(node);
    }

    public void inAExpressaoLogicaExpressaoLogica(AExpressaoLogicaExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAExpressaoLogicaExpressaoLogica(AExpressaoLogicaExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoLogicaExpressaoLogica(AExpressaoLogicaExpressaoLogica node)
    {
        inAExpressaoLogicaExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getSinalLogicoNao() != null)
        {
            node.getSinalLogicoNao().apply(this);
        }
        outAExpressaoLogicaExpressaoLogica(node);
    }

    public void inATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        inATermoLogicoExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outATermoLogicoExpressaoLogica(node);
    }

    public void inATermoLogicoTermoLogico(ATermoLogicoTermoLogico node)
    {
        defaultIn(node);
    }

    public void outATermoLogicoTermoLogico(ATermoLogicoTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoLogicoTermoLogico(ATermoLogicoTermoLogico node)
    {
        inATermoLogicoTermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        if(node.getSinalLogicoE() != null)
        {
            node.getSinalLogicoE().apply(this);
        }
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outATermoLogicoTermoLogico(node);
    }

    public void inAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        defaultIn(node);
    }

    public void outAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        inAFatorLogicoTermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        outAFatorLogicoTermoLogico(node);
    }

    public void inAFatorLogicoFatorLogico(AFatorLogicoFatorLogico node)
    {
        defaultIn(node);
    }

    public void outAFatorLogicoFatorLogico(AFatorLogicoFatorLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorLogicoFatorLogico(AFatorLogicoFatorLogico node)
    {
        inAFatorLogicoFatorLogico(node);
        if(node.getTermoRelacional() != null)
        {
            node.getTermoRelacional().apply(this);
        }
        if(node.getSinalLogicoOu() != null)
        {
            node.getSinalLogicoOu().apply(this);
        }
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        outAFatorLogicoFatorLogico(node);
    }

    public void inATermoRelacionalFatorLogico(ATermoRelacionalFatorLogico node)
    {
        defaultIn(node);
    }

    public void outATermoRelacionalFatorLogico(ATermoRelacionalFatorLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoRelacionalFatorLogico(ATermoRelacionalFatorLogico node)
    {
        inATermoRelacionalFatorLogico(node);
        if(node.getTermoRelacional() != null)
        {
            node.getTermoRelacional().apply(this);
        }
        outATermoRelacionalFatorLogico(node);
    }

    public void inATermoRelacionalTermoRelacional(ATermoRelacionalTermoRelacional node)
    {
        defaultIn(node);
    }

    public void outATermoRelacionalTermoRelacional(ATermoRelacionalTermoRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoRelacionalTermoRelacional(ATermoRelacionalTermoRelacional node)
    {
        inATermoRelacionalTermoRelacional(node);
        if(node.getFatorRelacional() != null)
        {
            node.getFatorRelacional().apply(this);
        }
        if(node.getSinalIgualgade() != null)
        {
            node.getSinalIgualgade().apply(this);
        }
        if(node.getTermoRelacional() != null)
        {
            node.getTermoRelacional().apply(this);
        }
        outATermoRelacionalTermoRelacional(node);
    }

    public void inAFatorRelacionalTermoRelacional(AFatorRelacionalTermoRelacional node)
    {
        defaultIn(node);
    }

    public void outAFatorRelacionalTermoRelacional(AFatorRelacionalTermoRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorRelacionalTermoRelacional(AFatorRelacionalTermoRelacional node)
    {
        inAFatorRelacionalTermoRelacional(node);
        if(node.getFatorRelacional() != null)
        {
            node.getFatorRelacional().apply(this);
        }
        outAFatorRelacionalTermoRelacional(node);
    }

    public void inAFatorRelacionalFatorRelacional(AFatorRelacionalFatorRelacional node)
    {
        defaultIn(node);
    }

    public void outAFatorRelacionalFatorRelacional(AFatorRelacionalFatorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorRelacionalFatorRelacional(AFatorRelacionalFatorRelacional node)
    {
        inAFatorRelacionalFatorRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getSinalRelacional() != null)
        {
            node.getSinalRelacional().apply(this);
        }
        if(node.getFatorRelacional() != null)
        {
            node.getFatorRelacional().apply(this);
        }
        outAFatorRelacionalFatorRelacional(node);
    }

    public void inATermoAritmeticoFatorRelacional(ATermoAritmeticoFatorRelacional node)
    {
        defaultIn(node);
    }

    public void outATermoAritmeticoFatorRelacional(ATermoAritmeticoFatorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoAritmeticoFatorRelacional(ATermoAritmeticoFatorRelacional node)
    {
        inATermoAritmeticoFatorRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        outATermoAritmeticoFatorRelacional(node);
    }

    public void inATermoAritmeticoTermoAritmetico(ATermoAritmeticoTermoAritmetico node)
    {
        defaultIn(node);
    }

    public void outATermoAritmeticoTermoAritmetico(ATermoAritmeticoTermoAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoAritmeticoTermoAritmetico(ATermoAritmeticoTermoAritmetico node)
    {
        inATermoAritmeticoTermoAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        outATermoAritmeticoTermoAritmetico(node);
    }

    public void inAFatorAritmeticoTermoAritmetico(AFatorAritmeticoTermoAritmetico node)
    {
        defaultIn(node);
    }

    public void outAFatorAritmeticoTermoAritmetico(AFatorAritmeticoTermoAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorAritmeticoTermoAritmetico(AFatorAritmeticoTermoAritmetico node)
    {
        inAFatorAritmeticoTermoAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        outAFatorAritmeticoTermoAritmetico(node);
    }

    public void inAFatorAritmeticoFatorAritmetico(AFatorAritmeticoFatorAritmetico node)
    {
        defaultIn(node);
    }

    public void outAFatorAritmeticoFatorAritmetico(AFatorAritmeticoFatorAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorAritmeticoFatorAritmetico(AFatorAritmeticoFatorAritmetico node)
    {
        inAFatorAritmeticoFatorAritmetico(node);
        if(node.getParenteses() != null)
        {
            node.getParenteses().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        outAFatorAritmeticoFatorAritmetico(node);
    }

    public void inATermoAritmeticoFatorAritmetico(ATermoAritmeticoFatorAritmetico node)
    {
        defaultIn(node);
    }

    public void outATermoAritmeticoFatorAritmetico(ATermoAritmeticoFatorAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoAritmeticoFatorAritmetico(ATermoAritmeticoFatorAritmetico node)
    {
        inATermoAritmeticoFatorAritmetico(node);
        if(node.getParenteses() != null)
        {
            node.getParenteses().apply(this);
        }
        outATermoAritmeticoFatorAritmetico(node);
    }

    public void inAParentesesParenteses(AParentesesParenteses node)
    {
        defaultIn(node);
    }

    public void outAParentesesParenteses(AParentesesParenteses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesParenteses(AParentesesParenteses node)
    {
        inAParentesesParenteses(node);
        if(node.getFParenteses() != null)
        {
            node.getFParenteses().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAParenteses() != null)
        {
            node.getAParenteses().apply(this);
        }
        outAParentesesParenteses(node);
    }

    public void inAValorParenteses(AValorParenteses node)
    {
        defaultIn(node);
    }

    public void outAValorParenteses(AValorParenteses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorParenteses(AValorParenteses node)
    {
        inAValorParenteses(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorParenteses(node);
    }

    public void inAVarParenteses(AVarParenteses node)
    {
        defaultIn(node);
    }

    public void outAVarParenteses(AVarParenteses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarParenteses(AVarParenteses node)
    {
        inAVarParenteses(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVarParenteses(node);
    }
}
