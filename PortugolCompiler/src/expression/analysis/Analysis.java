/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.analysis;

import expression.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAInstanciaPrograma(AInstanciaPrograma node);
    void caseABlocoComando(ABlocoComando node);
    void caseABlocoPrograma(ABlocoPrograma node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAConstanteDeclaracao(AConstanteDeclaracao node);
    void caseAVariavelVariavel(AVariavelVariavel node);
    void caseAVetorVariavel(AVetorVariavel node);
    void caseACase(ACase node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAValorRealValor(AValorRealValor node);
    void caseAValorInteiroValor(AValorInteiroValor node);
    void caseAValorCaractereValor(AValorCaractereValor node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseAFuncaoComando(AFuncaoComando node);
    void caseASeComando(ASeComando node);
    void caseASeSenaoComando(ASeSenaoComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAParaPassoComando(AParaPassoComando node);
    void caseAAtribuicoes(AAtribuicoes node);
    void caseALeiaFuncoes(ALeiaFuncoes node);
    void caseAEscrevaFuncoes(AEscrevaFuncoes node);
    void caseASeStant(ASeStant node);
    void caseASenaoEstruturas(ASenaoEstruturas node);
    void caseASeEstruturas(ASeEstruturas node);
    void caseASeSenaoEstruturas(ASeSenaoEstruturas node);
    void caseAAvalieEstruturas(AAvalieEstruturas node);
    void caseAEnquantoEstruturas(AEnquantoEstruturas node);
    void caseARepitaEstruturas(ARepitaEstruturas node);
    void caseAParaEstruturas(AParaEstruturas node);
    void caseAParaPassoEstruturas(AParaPassoEstruturas node);
    void caseAMaisExpressao(AMaisExpressao node);
    void caseAMenosExpressao(AMenosExpressao node);
    void caseAVezesExpressao(AVezesExpressao node);
    void caseADivididoExpressao(ADivididoExpressao node);
    void caseARestoExpressao(ARestoExpressao node);
    void caseAValorExpressao(AValorExpressao node);
    void caseAVariavelExpressao(AVariavelExpressao node);
    void caseAMenosExpressaoExpressao(AMenosExpressaoExpressao node);
    void caseAOuExpressaoLogica(AOuExpressaoLogica node);
    void caseAXorExpressaoLogica(AXorExpressaoLogica node);
    void caseAEExpressaoLogica(AEExpressaoLogica node);
    void caseAIgualExpressaoLogica(AIgualExpressaoLogica node);
    void caseADiferenteExpressaoLogica(ADiferenteExpressaoLogica node);
    void caseAMaiorigualExpressaoLogica(AMaiorigualExpressaoLogica node);
    void caseAMenorigualExpressaoLogica(AMenorigualExpressaoLogica node);
    void caseAMaiorExpressaoLogica(AMaiorExpressaoLogica node);
    void caseAMenorExpressaoLogica(AMenorExpressaoLogica node);
    void caseAMaisExpressaoLogica(AMaisExpressaoLogica node);
    void caseAMenosExpressaoLogica(AMenosExpressaoLogica node);
    void caseAVezesExpressaoLogica(AVezesExpressaoLogica node);
    void caseADivididoExpressaoLogica(ADivididoExpressaoLogica node);
    void caseARestoExpressaoLogica(ARestoExpressaoLogica node);
    void caseANaoExpressaoLogica(ANaoExpressaoLogica node);
    void caseAValorExpressaoLogica(AValorExpressaoLogica node);
    void caseAVariavelExpressaoLogica(AVariavelExpressaoLogica node);

    void caseTBranco(TBranco node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioLinhaFinal(TComentarioLinhaFinal node);
    void caseTComentario(TComentario node);
    void caseTComentarioFinal(TComentarioFinal node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTRecebe(TRecebe node);
    void caseTPontovirgula(TPontovirgula node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTDoispontos(TDoispontos node);
    void caseTACochete(TACochete node);
    void caseTFCochete(TFCochete node);
    void caseTAParenteses(TAParenteses node);
    void caseTFParenteses(TFParenteses node);
    void caseTAChave(TAChave node);
    void caseTFChave(TFChave node);
    void caseTMenos(TMenos node);
    void caseTMais(TMais node);
    void caseTVezes(TVezes node);
    void caseTDividido(TDividido node);
    void caseTResto(TResto node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMenorigual(TMenorigual node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTConstante(TConstante node);
    void caseTRetorne(TRetorne node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFimPonto(TFimPonto node);
    void caseTProximo(TProximo node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTEscrevaln(TEscrevaln node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimSe(TFimSe node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTFimPara(TFimPara node);
    void caseTInteiro(TInteiro node);
    void caseTCaractere(TCaractere node);
    void caseTReal(TReal node);
    void caseTNReal(TNReal node);
    void caseTNInteiro(TNInteiro node);
    void caseTNCaractere(TNCaractere node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
