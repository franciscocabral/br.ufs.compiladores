/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.node;

import expression.analysis.*;

@SuppressWarnings("nls")
public final class AApParenteses extends PParenteses
{
    private TAParenteses _aParenteses_;
    private PAp _ap_;

    public AApParenteses()
    {
        // Constructor
    }

    public AApParenteses(
        @SuppressWarnings("hiding") TAParenteses _aParenteses_,
        @SuppressWarnings("hiding") PAp _ap_)
    {
        // Constructor
        setAParenteses(_aParenteses_);

        setAp(_ap_);

    }

    @Override
    public Object clone()
    {
        return new AApParenteses(
            cloneNode(this._aParenteses_),
            cloneNode(this._ap_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAApParenteses(this);
    }

    public TAParenteses getAParenteses()
    {
        return this._aParenteses_;
    }

    public void setAParenteses(TAParenteses node)
    {
        if(this._aParenteses_ != null)
        {
            this._aParenteses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aParenteses_ = node;
    }

    public PAp getAp()
    {
        return this._ap_;
    }

    public void setAp(PAp node)
    {
        if(this._ap_ != null)
        {
            this._ap_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ap_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aParenteses_)
            + toString(this._ap_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aParenteses_ == child)
        {
            this._aParenteses_ = null;
            return;
        }

        if(this._ap_ == child)
        {
            this._ap_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aParenteses_ == oldChild)
        {
            setAParenteses((TAParenteses) newChild);
            return;
        }

        if(this._ap_ == oldChild)
        {
            setAp((PAp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
