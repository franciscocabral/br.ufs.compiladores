/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.node;

import expression.analysis.*;

@SuppressWarnings("nls")
public final class AAteAteEstrutura extends PAteEstrutura
{
    private TAte _ate_;
    private PIntOuVar _intOuVar_;

    public AAteAteEstrutura()
    {
        // Constructor
    }

    public AAteAteEstrutura(
        @SuppressWarnings("hiding") TAte _ate_,
        @SuppressWarnings("hiding") PIntOuVar _intOuVar_)
    {
        // Constructor
        setAte(_ate_);

        setIntOuVar(_intOuVar_);

    }

    @Override
    public Object clone()
    {
        return new AAteAteEstrutura(
            cloneNode(this._ate_),
            cloneNode(this._intOuVar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAteAteEstrutura(this);
    }

    public TAte getAte()
    {
        return this._ate_;
    }

    public void setAte(TAte node)
    {
        if(this._ate_ != null)
        {
            this._ate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ate_ = node;
    }

    public PIntOuVar getIntOuVar()
    {
        return this._intOuVar_;
    }

    public void setIntOuVar(PIntOuVar node)
    {
        if(this._intOuVar_ != null)
        {
            this._intOuVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._intOuVar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ate_)
            + toString(this._intOuVar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ate_ == child)
        {
            this._ate_ = null;
            return;
        }

        if(this._intOuVar_ == child)
        {
            this._intOuVar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ate_ == oldChild)
        {
            setAte((TAte) newChild);
            return;
        }

        if(this._intOuVar_ == oldChild)
        {
            setIntOuVar((PIntOuVar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
