Package expression;

Helpers

    unicode             = [0x0 .. 0xfffff];

    unicode_letras      = [0x0041..0x005a] | [0x0061..0x007a];
    unicode_numeros     = [0x0030..0x0039];

    ht                  = 0x0009;
    lf                  = 0x000a;
    ff                  = 0x000c;
    cr                  = 0x000d;
    espaco              = ' ';

    fim_de_linha        = lf | cr | cr lf;
    branco              = (espaco | ht | ff | fim_de_linha);

    estrela             = '*';
    barra               = '/';
    aspas               = ''';
    sublinhado          = '_';
    virgula_real        = ',';

    nao_estrela         = [unicode - estrela];
    nao_barra           = [unicode - barra];
    nao_estrela_ou_barra= [unicode - [estrela + barra]];
    
    nao_aspas           = [unicode - aspas];
    
    nao_fim_de_linha    = [unicode - [lf + cr]];
	nao_fl_e_b			= [nao_fim_de_linha - [estrela + barra]];
	nao_fl_e			= [nao_fim_de_linha - estrela];
	nao_fl_b			= [nao_fim_de_linha - barra];
	
    letras              = unicode_letras | sublinhado;
    letras_ou_numeros   = unicode_letras | unicode_numeros | sublinhado;
    
    comentario_inicio   = '/*';
    comentario_corpo    = nao_estrela_ou_barra* | (estrela nao_barra)* | (nao_estrela barra)*;
    comentario_final    = '*/';
    
    comentario_linha_inicio = '//';
    comentario_linha_corpo  = (estrela nao_fl_b)* | (barra nao_fl_e)* | nao_fl_e_b*;
    comentario_linha_final  = fim_de_linha; 

    digitos             = unicode_numeros+  ;
    inteiro             = digitos;
    real                = inteiro | inteiro virgula_real digitos;
    caractere           = [nao_aspas - [lf + cr]];


States
  normal,
  comentario,
  c_l;

Tokens

    {normal} branco              = branco;
    {normal->c_l} comentario_linha= comentario_linha_inicio;
    {c_l->normal} comentario_linha_final =  comentario_linha_corpo* comentario_linha_final?;
    

    {normal->comentario, comentario, c_l->comentario} 
    comentario                   = comentario_inicio;
    {comentario} comentario_final= comentario_final;
    {comentario} comentario_corpo= comentario_corpo;
    

    {normal} recebe              = '<-';
    {normal} pontovirgula        = ';';
    {normal} virgula             = ',';
    {normal} ponto               = '.';
    {normal} doispontos          = ':';
    {normal} a_cochete           = '[';
    {normal} f_cochete           = ']';
    {normal} a_parenteses        = '(';
    {normal} f_parenteses        = ')';
    {normal} a_chave             = '{';
    {normal} f_chave             = '}';

    {normal} menos               = '-';
    {normal} mais                = '+';
    {normal} vezes               = '*';
    {normal} dividido            = '/';
    {normal} resto               = 'resto';

    {normal} e                   = 'e';
    {normal} ou                  = 'ou';
    {normal} xor                 = 'xor';
    {normal} nao                 = 'nao';

    {normal} igual               = '=';
    {normal} diferente           = '<>';
    {normal} menorigual          = '<=';
    {normal} maiorigual          = '>=';
    {normal} maior               = '>';
    {normal} menor               = '<';

    {normal} constante           = 'const';
    
    {normal} retorne             = 'retorne'; 

    {normal} programa            = 'programa';
    {normal} inicio              = 'inicio';
    {normal} fim_ponto			 = 'fim.';
    {normal} proximo             = 'proximo';
    
    {normal} leia                = 'leia';
    {normal} escreva             = 'escreva';
    {normal} escrevaln           = 'escrevaln';
    
    {normal} se                  = 'se';
    {normal} entao               = 'entao';
    {normal} senao               = 'senao';
    {normal} fim_se              = 'fim se';

    {normal} avalie              = 'avalie';
    {normal} caso                = 'caso';
    {normal} fim_avalie          = 'fim avalie';
    
    {normal} enquanto            = 'enquanto';
    {normal} faca                = 'faca';
    {normal} fim_enquanto        = 'fim enquanto';

    {normal} repita              = 'repita';
    {normal} ate                 = 'ate';
    
    {normal} para                = 'para';
    {normal} de                  = 'de';
    {normal} passo               = 'passo';
    {normal} fim_para            = 'fim para';
    
    {normal} inteiro             = inteiro;
    {normal} caractere           = aspas caractere* aspas;
    {normal} real                = real;

    {normal} n_real              = 'real';
    {normal} n_inteiro           = 'inteiro';
    {normal} n_caractere         = 'caractere';

    {normal} id                  = letras | letras letras_ou_numeros*;

Ignored Tokens
   comentario, comentario_linha, branco, comentario_linha_final;

Productions
    start               = {start}               instancia_programa 									{-> New start(instancia_programa)};
    
    bloco_comando 		{-> comando*} = 
    					  {comando_simples}     comando												{-> [comando.comando]}
                        | {bloco_comandos}      bloco_comando comando								{-> [bloco_comando.comando, comando.comando]};
                        
	bloco_expressao 	{-> expressao_logica*} = 
    					  {expressao_logica}    expressao_logica									{-> [expressao_logica.expressao_logica]}
                        | {bloco_espressao}     bloco_expressao virgula expressao_logica			{-> [bloco_expressao.expressao_logica, expressao_logica.expressao_logica]};
                        
    bloco_variavel		{-> variavel*} =
                          {variavel_simples}    variavel											{-> [variavel.variavel]}
                        | {bloco_variaveis}     bloco_variavel virgula variavel						{-> [bloco_variavel.variavel, variavel.variavel]};
   
    bloco_caso 			{-> case*} =
                          {caso_simples}		caso_stant											{-> [caso_stant.case]}
                        | {bloco_caso}          bloco_caso caso_stant								{-> [bloco_caso.case, caso_stant.case]};
                        
    caso_stant			{-> case} = caso valor doispontos bloco_comando								{-> New case(valor.valor, [bloco_comando.comando])};
    
                        
    bloco_declaracao 	{-> declaracao*} = 
                          {declaracao_simples}  declaracao											{-> [declaracao.declaracao]}
                        | {bloco_declaracao}    bloco_declaracao declaracao							{-> [bloco_declaracao.declaracao, declaracao.declaracao]};

    declaracao 			{-> declaracao} = 
    					  {variavel}			tipo doispontos bloco_variavel pontovirgula			{-> New declaracao.variavel(tipo,[bloco_variavel.variavel])}
                        | {constante}			constante id valor pontovirgula						{-> New declaracao.constante(id, valor)};

	bloco_programa		{-> bloco_programa} = 
						  bloco_declaracao bloco_comando											{-> New bloco_programa([bloco_declaracao.declaracao], [bloco_comando.comando])};

    instancia_programa  {-> instancia_programa} = 
    					  programa 	id inicio bloco_programa fim_ponto  							{-> New instancia_programa(id, bloco_programa)};
    
    tipo                = 
    					  {real}                n_real 												
                        | {inteiro}             n_inteiro 											
                        | {caractere}           n_caractere;

    variavel 			{-> variavel} = 
    					  {variavel}       		id 													{-> New variavel.variavel(id)}
                        | {vetor}      			id a_cochete inteiro f_cochete						{-> New variavel.vetor(id, inteiro)};

    valor               = 
    					  {valor_real}          real 												
                        | {valor_inteiro}       inteiro 
                        | {valor_caractere}     caractere; 

    comando {-> comando} = 
    					  {atribuicao}          atribuicoes											{-> New comando.atribuicao(atribuicoes)}
                        | {funcao}              funcoes												{-> New comando.funcao(funcoes)}
                        | {se}                  se_estruturas										{-> New comando.se(se_estruturas)}
                        | {se_senao}            se_senao_estruturas									{-> New comando.se_senao(se_senao_estruturas)}
                        | {avalie}              avalie_estruturas									{-> New comando.avalie(avalie_estruturas)}
                        | {enquanto}            enquanto_estruturas									{-> New comando.enquanto(enquanto_estruturas)}
                        | {repita}              repita_estruturas									{-> New comando.repita(repita_estruturas)}
                        | {para}                para_estruturas										{-> New comando.para(para_estruturas)}
                        | {para_passo}          para_passo_estruturas								{-> New comando.para_passo(para_passo_estruturas)};
            
    atribuicoes         {-> atribuicoes } = 
												variavel recebe expressao pontovirgula				{-> New atribuicoes(variavel, expressao)};	

    funcoes             {-> funcoes } = 
    					  {leia}                leia a_parenteses bloco_variavel f_parenteses pontovirgula												
    						  																		{-> New funcoes.leia([bloco_variavel.variavel])}
                        | {escreva}             escreva a_parenteses bloco_expressao f_parenteses pontovirgula											
    						  																		{-> New funcoes.escreva([bloco_expressao.expressao_logica])};
    
    int_ou_var			= {inteiro} inteiro
    					| {var} variavel;
    					
    passo_estruturas    = {passo}               passo int_ou_var;   
    
    ate_estrutura       = {ate}                 ate int_ou_var;


	
	se_stant  	      		{-> se_stant} = 
													se a_parenteses expressao_logica f_parenteses entao bloco_comando 											
    						  																		{-> New se_stant(expressao_logica, [bloco_comando.comando])};
    senao_estruturas  		{-> senao_estruturas} = 
    						  						senao bloco_comando																								
    						  																		{-> New senao_estruturas( [bloco_comando.comando])};
    se_estruturas 			{-> se_estruturas} =
    						  {se} 					se_stant fim_se pontovirgula 										
    						  																		{-> New se_estruturas(se_stant)};
    se_senao_estruturas		{-> se_senao_estruturas} = 
    						  {se_senao} 			se_stant senao_estruturas fim_se pontovirgula      			
    						  																		{-> New se_senao_estruturas(se_stant, senao_estruturas)};																			
    avalie_estruturas		{-> avalie_estruturas } = 
    						  {avalie}              avalie a_parenteses expressao f_parenteses bloco_caso senao doispontos bloco_comando fim_avalie pontovirgula
    					                        													{-> New avalie_estruturas(expressao, [bloco_caso.case], [bloco_comando.comando])};	
    enquanto_estruturas		{-> enquanto_estruturas } = 
    						  {enquanto}            enquanto a_parenteses expressao_logica f_parenteses faca bloco_comando fim_enquanto pontovirgula
    					                         													{-> New enquanto_estruturas(expressao_logica, [bloco_comando.comando])};	          
    repita_estruturas 		{-> repita_estruturas } = 
    						  {repita}              repita bloco_comando ate a_parenteses expressao_logica f_parenteses pontovirgula
    					                         													{-> New repita_estruturas([bloco_comando.comando], expressao_logica)};	
    para_estruturas			{-> para_estruturas } = 
    						  {para}                para variavel de int_ou_var ate_estrutura faca bloco_comando fim_para pontovirgula
    					                        													{-> New para_estruturas(variavel, [bloco_comando.comando])};	
    para_passo_estruturas	{-> para_passo_estruturas }	= 
    					 	  {para_passo}          para variavel de int_ou_var passo_estruturas ate_estrutura faca bloco_comando fim_para pontovirgula
    					                         													{-> New para_passo_estruturas(variavel, [bloco_comando.comando])};	
             
             
             
//Lista de prioridades: http://pt.wikipedia.org/wiki/Operadores_em_C_e_C%2B%2B

//Expressao Aritmetica Pura
    expressao  		=  
    				  {mais} expressao mais fator 								{-> New expressao.mais(expressao, fator.expressao)  }
    				| {menos} expressao menos fator 							{-> New expressao.menos(expressao, fator.expressao)  }
                    | {fator} fator               								{-> fator.expressao};
    fator 			{-> expressao} =   
                      {vezes} fator vezes termo 								{-> New expressao.vezes(fator.expressao, termo.expressao)  }
                    | {dividido} fator dividido termo 							{-> New expressao.dividido(fator.expressao, termo.expressao)  }
                    | {resto} fator resto termo 								{-> New expressao.dividido(fator.expressao, termo.expressao)  }
                    | {termo} termo                    							{-> termo.expressao};                    
    termo 			{-> expressao} =  
                      {expressao}  a_parenteses expressao f_parenteses 			{-> expressao}
                    | {valor} valor                                    			{-> New expressao.valor(valor)}
                    | {variavel} variavel                              			{-> New expressao.variavel(variavel)};

//Expressao Logico-Relacional
	expressao_logica = 
					  {ou} parenteses ou parenteses2 							{-> New expressao_logica.ou(parenteses.expressao_logica, parenteses2.expressao_logica)  }
	                | {xor} parenteses 	xor parenteses2							{-> New expressao_logica.xor(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {termo_logico} termo_logico								{-> termo_logico.expressao_logica};  
						
	termo_logico    {-> expressao_logica}  = 
	                {e} parenteses e 	parenteses2 							{-> New expressao_logica.e(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {relacional} expressao_relac 								{-> expressao_relac.expressao_logica}; 
						
	expressao_relac {-> expressao_logica}  =	
	                  {igual} parenteses	igual parenteses2 					{-> New expressao_logica.igual(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {diferente} parenteses diferente parenteses2 				{-> New expressao_logica.diferente(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {termo_relac} termo_relac 								{-> termo_relac.expressao_logica}; 
	
	termo_relac	    {-> expressao_logica}  =	
                      {maiorigual} 	parenteses  maiorigual parenteses2 		    {-> New expressao_logica.maiorigual(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {menorigual} parenteses  menorigual parenteses2			{-> New expressao_logica.menorigual(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {maior} parenteses  maior parenteses2 					{-> New expressao_logica.maior(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {menor} parenteses  menor parenteses2 					{-> New expressao_logica.menor(parenteses.expressao_logica, parenteses2.expressao_logica)  }
					| {expressao_aritm} expressao_aritm							{-> expressao_aritm.expressao_logica} 
					| {negacao} negacao											{-> negacao.expressao_logica}; 	
					
	expressao_aritm	{-> expressao_logica}=  
    				  {mais} expressao_aritm mais fator_aritm 					{-> New expressao_logica.mais(expressao_aritm.expressao_logica, fator_aritm.expressao_logica)  }
    				| {menos} expressao_aritm menos fator_aritm 				{-> New expressao_logica.menos(expressao_aritm.expressao_logica, fator_aritm.expressao_logica)  }
                    | {fator} fator_aritm               						{-> fator_aritm.expressao_logica};
    fator_aritm 			{-> expressao_logica} =   
                      {vezes} fator_aritm vezes termo_aritm 					{-> New expressao_logica.vezes(fator_aritm.expressao_logica, termo_aritm.expressao_logica)  }
                    | {dividido} fator_aritm dividido termo_aritm 				{-> New expressao_logica.dividido(fator_aritm.expressao_logica, termo_aritm.expressao_logica)  }
                    | {resto} fator_aritm resto termo_aritm 					{-> New expressao_logica.dividido(fator_aritm.expressao_logica, termo_aritm.expressao_logica)  }
                    | {termo} termo_aritm                    					{-> termo_aritm.expressao_logica};                    
    termo_aritm 	{-> expressao_logica} =  
                      {expressao}  a_parenteses expressao_aritm f_parenteses 	{-> expressao_aritm.expressao_logica}
                    | {valor} valor                                    			{-> New expressao_logica.valor(valor)}
                    | {variavel} variavel                              			{-> New expressao_logica.variavel(variavel)};	
             
    negacao	        {-> expressao_logica}  = 
                      {nao} nao parenteses 										{-> New expressao_logica.nao(parenteses.expressao_logica)};
   	
    parenteses      {-> expressao_logica}  = 
                      {parenteses} a_parenteses expressao_logica f_parenteses 	{-> expressao_logica}
					| {valor} valor                                      		{-> New expressao_logica.valor(valor)}
               		| {variavel} variavel                                   	{-> New expressao_logica.variavel(variavel)};
               		
  	parenteses2     {-> expressao_logica}  =          
                      {parenteses} parenteses									{-> parenteses.expressao_logica};
  

Abstract Syntax Tree

    start = instancia_programa;
    
    instancia_programa 	= [id]:id [bloco_programa]:bloco_programa;
    
    bloco_comando       = comando*;
    
    bloco_programa		= [bloco_declaracao]:declaracao* 	[bloco_comando]:comando* ;
    
    declaracao			= {variavel} 			[tipo]:	tipo  	[bloco_variavel]:	variavel*
    					| {constante} 			[id]:	id		[valor]:			valor;
   
    variavel			= {variavel}            [id]: 	id 
                     	| {vetor}      			[id]: 	id		[inteiro]:inteiro;
                     	
                     	
    case				= [valor]: valor 	[bloco_comando]: comando*;                     	
                     	
    tipo                = 
    					  {real}                n_real 												
                        | {inteiro}             n_inteiro 											
                        | {caractere}           n_caractere;
    valor               = 
    					  {valor_real}          real 												
                        | {valor_inteiro}       inteiro 
                        | {valor_caractere}     caractere;
                         
    comando  = 
    					  {atribuicao}          atribuicoes									
                        | {funcao}              funcoes												
                        | {se}                  se_estruturas										
                        | {se_senao}            se_senao_estruturas									
                        | {avalie}              avalie_estruturas									
                        | {enquanto}            enquanto_estruturas									
                        | {repita}              repita_estruturas									
                        | {para}                para_estruturas										
                        | {para_passo}          para_passo_estruturas								;
     
    atribuicoes         = [variavel]:variavel [expressao]:expressao;
    
    funcoes             = {leia} [bloco_variavel]:	variavel*
                        | {escreva} [bloco_expressao]: expressao_logica*;
                        
    se_stant            = [expressao_logica]:expressao_logica [bloco_comando]:comando*;
    senao_estruturas    = [bloco_comando]:comando*;
    se_estruturas       = [se_stant]:se_stant;
    se_senao_estruturas = [se_stant]:se_stant [senao_estruturas]:senao_estruturas;
    avalie_estruturas   = [expressao]:expressao [bloco_caso]:case* [bloco_comando]:comando*;
    enquanto_estruturas = [expressao_logica]:expressao_logica [bloco_comando]:comando*;
    repita_estruturas   = [bloco_comando]:comando* [expressao_logica]:expressao_logica;
    para_estruturas     = [variavel]:variavel [bloco_comando]:comando*;
    para_passo_estruturas = [variavel]:variavel [bloco_comando]:comando*;
     
    //Expressao Aritmetica Pura
    expressao    		=    
						  {mais} 		[l]: expressao [r]: expressao 
			            | {menos}  		[l]: expressao [r]: expressao 
			            | {vezes}  		[l]: expressao [r]: expressao
			            | {dividido}  	[l]: expressao [r]: expressao
			            | {resto}  		[l]: expressao [r]: expressao
			            | {valor}     	valor
			            | {variavel}  	variavel;
   
   //Expressao Logico-Relacional
	expressao_logica 	=	  
						  {ou}			[l]: expressao_logica [r]: expressao_logica  
						| {xor}			[l]: expressao_logica [r]: expressao_logica  
		                | {e}			[l]: expressao_logica [r]: expressao_logica  
		                | {igual}		[l]: expressao_logica [r]: expressao_logica  
		                | {diferente}	[l]: expressao_logica [r]: expressao_logica 
	                    | {maiorigual}	[l]: expressao_logica [r]: expressao_logica  
	                    | {menorigual}	[l]: expressao_logica [r]: expressao_logica  
	                    | {maior}		[l]: expressao_logica [r]: expressao_logica  
	                    | {menor}		[l]: expressao_logica [r]: expressao_logica
	                    | {mais} 		[l]: expressao_logica [r]: expressao_logica 
			            | {menos}  		[l]: expressao_logica [r]: expressao_logica 
			            | {vezes}  		[l]: expressao_logica [r]: expressao_logica
			            | {dividido}  	[l]: expressao_logica [r]: expressao_logica
			            | {resto}  		[l]: expressao_logica [r]: expressao_logica   
	                    | {nao}			[l]: expressao_logica  
	                    | {valor}		valor
	                    | {variavel}	variavel;
  
